C:\Users\hp>mongo
MongoDB shell version v4.4.2
connecting to: mongodb://127.0.0.1:27017/?compressors=disabled&gssapiServiceName=mongodb
Implicit session: session { "id" : UUID("c2be21bf-4500-4038-ac3f-f174a10dc901") }
MongoDB server version: 4.4.2
---
The server generated these startup warnings when booting:
        2020-12-02T07:33:59.786+05:30: Access control is not enabled for the database. Read and write access to data and configuration is unrestricted
        2020-12-02T07:33:59.787+05:30: This server is bound to localhost. Remote systems will be unable to connect to this server. Start the server with --bind_ip <address> to specify which IP addresses it should serve responses from, or with --bind_ip_all to bind to all interfaces. If this behavior is desired, start the server with --bind_ip 127.0.0.1 to disable this warning
---
---
        Enable MongoDB's free cloud-based monitoring service, which will then receive and display
        metrics about your deployment (disk utilization, CPU, operation statistics, etc).

        The monitoring data will be available on a MongoDB website with a unique URL accessible to you
        and anyone you share the URL with. MongoDB may use this information to make product
        improvements and to suggest MongoDB products and deployment options to you.

        To enable free monitoring, run the following command: db.enableFreeMonitoring()
        To permanently disable this reminder, run the following command: db.disableFreeMonitoring()
---
> show dbs
admin   0.000GB
config  0.000GB
local   0.000GB
> db.createCollection("hospital")
{ "ok" : 1 }
> show dbs
admin   0.000GB
config  0.000GB
local   0.000GB
test    0.000GB
> use hospital
switched to db hospital
> show dbs
admin   0.000GB
config  0.000GB
local   0.000GB
test    0.000GB
> db.patients.insertOne({_id:"PAT001", name:"Max", age:"29", history:{disease:"Cold", treatment:"ChestCold500"}})
{ "acknowledged" : true, "insertedId" : "PAT001" }
> db.patients.insertMany([{_id:"PAT002", name:"Lenny", age:"30", history:{disease:"Cold", treatment:"ChestCold500"}}, {_id:"PAT003", name:"Sheldon", age:"54", history::{disease:"Migrane", treatement:"Dissprine"}}])
uncaught exception: SyntaxError: expected expression, got ':' :
@(shell):1:165
> db.patients.insertMany([{_id:"PAT002", name:"Lenny", age:"30", history:{disease:"Cold", treatment:"ChestCold500"}}, {_id:"PAT003", name:"Sheldon", age:"54", history:{disease:"Migrane", treatement:"Dissprine"}}])
{ "acknowledged" : true, "insertedIds" : [ "PAT002", "PAT003" ] }
> db.patients.find()
{ "_id" : "PAT001", "name" : "Max", "age" : "29", "history" : { "disease" : "Cold", "treatment" : "ChestCold500" } }
{ "_id" : "PAT002", "name" : "Lenny", "age" : "30", "history" : { "disease" : "Cold", "treatment" : "ChestCold500" } }
{ "_id" : "PAT003", "name" : "Sheldon", "age" : "54", "history" : { "disease" : "Migrane", "treatement" : "Dissprine" } }
> db.patients.find().pretty()
{
        "_id" : "PAT001",
        "name" : "Max",
        "age" : "29",
        "history" : {
                "disease" : "Cold",
                "treatment" : "ChestCold500"
        }
}
{
        "_id" : "PAT002",
        "name" : "Lenny",
        "age" : "30",
        "history" : {
                "disease" : "Cold",
                "treatment" : "ChestCold500"
        }
}
{
        "_id" : "PAT003",
        "name" : "Sheldon",
        "age" : "54",
        "history" : {
                "disease" : "Migrane",
                "treatement" : "Dissprine"
        }
}
> db.patients.insertMany([{_id:"PAT004", name:"Lenny", age:"30", history:{disease:"Cold", treatment:"ChestCold500"}}, {_id:"PAT005", name:"Sheldon", age:"54", history:{disease:"Migrane", treatement:"Dissprine"}}])
{ "acknowledged" : true, "insertedIds" : [ "PAT004", "PAT005" ] }
> db.patients.find().pretty()
{
        "_id" : "PAT001",
        "name" : "Max",
        "age" : "29",
        "history" : {
                "disease" : "Cold",
                "treatment" : "ChestCold500"
        }
}
{
        "_id" : "PAT002",
        "name" : "Lenny",
        "age" : "30",
        "history" : {
                "disease" : "Cold",
                "treatment" : "ChestCold500"
        }
}
{
        "_id" : "PAT003",
        "name" : "Sheldon",
        "age" : "54",
        "history" : {
                "disease" : "Migrane",
                "treatement" : "Dissprine"
        }
}
{
        "_id" : "PAT004",
        "name" : "Lenny",
        "age" : "30",
        "history" : {
                "disease" : "Cold",
                "treatment" : "ChestCold500"
        }
}
{
        "_id" : "PAT005",
        "name" : "Sheldon",
        "age" : "54",
        "history" : {
                "disease" : "Migrane",
                "treatement" : "Dissprine"
        }
}
> db.patients.updateOne({_id:"PAT004"}, {name:"Sheldon Cooper",age:"24",history:{disease:"Back pain",treatement":"Massage"}})
uncaught exception: SyntaxError: missing : after property id :
@(shell):1:109
> db.patients.updateOne({_id:"PAT004"}, {name:"Sheldon Cooper",age:"24",history:{disease:"Back pain",treatement":"Massage"}}, {updated:"T"})
uncaught exception: SyntaxError: missing : after property id :
@(shell):1:109
> db.patients.updateOne({_id:"PAT004"}, $set:{{name:"Sheldon Cooper",age:"24",history:{disease:"Back pain",treatement":"Massage"}}}, {updated:"T"})
uncaught exception: SyntaxError: missing ) after argument list :
@(shell):1:42
> db.patients.updateOne({_id:"PAT004"}, $set:{{name:"Sheldon Cooper",age:"24",history:{disease:"Back pain",treatement":"Massage"}}}, {updated:"T"})
uncaught exception: SyntaxError: missing ) after argument list :
@(shell):1:42
> db.patients.update({_id:"PAT004"}, $set:{{name:"Sheldon Cooper",age:"24",history:{disease:"Back pain",treatement":"Massage"}}}, {updated:"T"})
uncaught exception: SyntaxError: missing ) after argument list :
@(shell):1:39
> db.patients.update({_id:"PAT004"}, $set:{{name:"Sheldon Cooper",age:"24",history:{disease:"Back pain",treatement:"Massage"}}}, {updated:"T"})
uncaught exception: SyntaxError: missing ) after argument list :
@(shell):1:39
> db.patients.update({_id:"PAT004"}, {$set:{{name:"Sheldon Cooper",age:"24",history:{disease:"Back pain",treatement:"Massage"}}}}, {updated:"T"})
uncaught exception: SyntaxError: expected property name, got '{' :
@(shell):1:42
> db.patients.update({_id:"PAT004"}, {$set:{name:"Sheldon Cooper",age:"24",history:{disease:"Back pain",treatement:"Massage"}}}, {updated:"T"})
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })
> db.patients.find().pretty()
{
        "_id" : "PAT001",
        "name" : "Max",
        "age" : "29",
        "history" : {
                "disease" : "Cold",
                "treatment" : "ChestCold500"
        }
}
{
        "_id" : "PAT002",
        "name" : "Lenny",
        "age" : "30",
        "history" : {
                "disease" : "Cold",
                "treatment" : "ChestCold500"
        }
}
{
        "_id" : "PAT003",
        "name" : "Sheldon",
        "age" : "54",
        "history" : {
                "disease" : "Migrane",
                "treatement" : "Dissprine"
        }
}
{
        "_id" : "PAT004",
        "name" : "Sheldon Cooper",
        "age" : "24",
        "history" : {
                "disease" : "Back pain",
                "treatement" : "Massage"
        }
}
{
        "_id" : "PAT005",
        "name" : "Sheldon",
        "age" : "54",
        "history" : {
                "disease" : "Migrane",
                "treatement" : "Dissprine"
        }
}
> db.patients.find({},$gt{30})
uncaught exception: SyntaxError: missing ) after argument list :
@(shell):1:23
> db.patients.find({},$gt{age:"20"})
uncaught exception: SyntaxError: missing ) after argument list :
@(shell):1:23
> db.patients.find({},$gt:{age:"20"})
uncaught exception: SyntaxError: missing ) after argument list :
@(shell):1:23
> db.patients.find({},{$gt:{age:"20"}})
Error: error: {
        "ok" : 0,
        "errmsg" : "FieldPath field names may not start with '$'.",
        "code" : 16410,
        "codeName" : "Location16410"
}
> db.patients.find({},{$gt:"20"})
Error: error: {
        "ok" : 0,
        "errmsg" : "FieldPath field names may not start with '$'.",
        "code" : 16410,
        "codeName" : "Location16410"
}
> db.patients.find({},{age:{$gt:"20"}})
Error: error: {
        "ok" : 0,
        "errmsg" : "Expression $gt takes exactly 2 arguments. 1 were passed in.",
        "code" : 16020,
        "codeName" : "Location16020"
}
> db.patients.find({age:{$gt:"20"}})
{ "_id" : "PAT001", "name" : "Max", "age" : "29", "history" : { "disease" : "Cold", "treatment" : "ChestCold500" } }
{ "_id" : "PAT002", "name" : "Lenny", "age" : "30", "history" : { "disease" : "Cold", "treatment" : "ChestCold500" } }
{ "_id" : "PAT003", "name" : "Sheldon", "age" : "54", "history" : { "disease" : "Migrane", "treatement" : "Dissprine" } }
{ "_id" : "PAT004", "name" : "Sheldon Cooper", "age" : "24", "history" : { "disease" : "Back pain", "treatement" : "Massage" } }
{ "_id" : "PAT005", "name" : "Sheldon", "age" : "54", "history" : { "disease" : "Migrane", "treatement" : "Dissprine" } }
> db.patients.find({age:{$gt:"50"}})
{ "_id" : "PAT003", "name" : "Sheldon", "age" : "54", "history" : { "disease" : "Migrane", "treatement" : "Dissprine" } }
{ "_id" : "PAT005", "name" : "Sheldon", "age" : "54", "history" : { "disease" : "Migrane", "treatement" : "Dissprine" } }
> db.patients.find({age:{$gt:"50"}}).pretty()
{
        "_id" : "PAT003",
        "name" : "Sheldon",
        "age" : "54",
        "history" : {
                "disease" : "Migrane",
                "treatement" : "Dissprine"
        }
}
{
        "_id" : "PAT005",
        "name" : "Sheldon",
        "age" : "54",
        "history" : {
                "disease" : "Migrane",
                "treatement" : "Dissprine"
        }
}
> db.patients.delete(history.disease:"Cold")
uncaught exception: SyntaxError: missing ) after argument list :
@(shell):1:34
> db.patients.delete({history.disease:"Cold"})
uncaught exception: SyntaxError: missing : after property id :
@(shell):1:27
> db.patients.remove({history.disease:"Cold"})
uncaught exception: SyntaxError: missing : after property id :
@(shell):1:27
> db.patients.delete({"history.disease":"Cold"})
uncaught exception: TypeError: db.patients.delete is not a function :
@(shell):1:1
> db.patients.deleteOne({"history.disease":"Cold"})
{ "acknowledged" : true, "deletedCount" : 1 }
> db.patients.deleteMany({"history.disease":"Cold"})
{ "acknowledged" : true, "deletedCount" : 1 }
> db.patients.find().pretty
function() {
    this._prettyShell = true;
    return this;
}
> db.patients.find().pretty()
{
        "_id" : "PAT003",
        "name" : "Sheldon",
        "age" : "54",
        "history" : {
                "disease" : "Migrane",
                "treatement" : "Dissprine"
        }
}
{
        "_id" : "PAT004",
        "name" : "Sheldon Cooper",
        "age" : "24",
        "history" : {
                "disease" : "Back pain",
                "treatement" : "Massage"
        }
}
{
        "_id" : "PAT005",
        "name" : "Sheldon",
        "age" : "54",
        "history" : {
                "disease" : "Migrane",
                "treatement" : "Dissprine"
        }
}